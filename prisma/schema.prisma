// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum accountType {
  user
  admin
}

model User {
  id           String         @id @unique @default(uuid())
  username     String
  email        String         @unique
  password     String
  accountType  accountType    @default(user)
  is_verified  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  otp          Otp[]
  profile      Profile?
  session      Session?
  borrowedBook BorrowedBook[]
  reservedBook ReservedBook[]
  fine         Fine[]

  @@map("users")
}

model Otp {
  id     String   @id @unique @default(uuid())
  token  String
  userId String
  expiry DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("otps")
}

model Profile {
  id          String @id @unique @default(uuid())
  name        String
  address     String
  phone       String
  countryCode String
  country     String
  state       String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("profiles")
}

model Session {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)

  sessionToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}

model Book {
  id              String         @id @unique @default(uuid())
  title           String
  genre           String
  availability    Boolean        @default(true)
  totalCopies     Int            @default(1)
  reservedCopies  Int            @default(0)
  availableCopies Int            @default(1)
  author          String
  description     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  borrowedBook    BorrowedBook[]
  reservedBook    ReservedBook[]
  fine            Fine[]

  @@map("books")
}

model BorrowedBook {
  id         String    @id @unique @default(uuid())
  borrowedBy String
  user       User      @relation(fields: [borrowedBy], references: [id],onDelete: Cascade)
  bookId     String
  book       Book      @relation(fields: [bookId], references: [id],onDelete: Cascade)
  borrowedAt DateTime  @default(now())
  returnedAt DateTime?
  dueDate    DateTime
  isFinePaid Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("borrowed_books")
}

model ReservedBook {
  id           String   @id @unique @default(uuid())
  reservedBy   String
  user         User     @relation(fields: [reservedBy], references: [id],onDelete: Cascade)
  bookId       String
  book         Book     @relation(fields: [bookId], references: [id],onDelete: Cascade)
  dateReserved DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("reserved_books")
}

model Fine {
  id        String   @id @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  currency  String   @default("USD")
  amount    Float
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fines")
}
